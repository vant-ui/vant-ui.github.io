"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["3255"],{64250:function(s,n,a){a.r(n);var l=a("38061");let e=["innerHTML"];n.default={setup:()=>({html:""}),render:()=>((0,l.wg)(),(0,l.iD)("div",{class:"van-doc-markdown-body",innerHTML:'<h1>useRaf</h1>\n<div class="van-doc-card"><h3 id="intro" tabindex="-1">Intro</h3>\n<p>Provide convenient call and cancellation of <a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame" target="_blank">requestAnimationFrame</a>.</p>\n</div><h2 id="usage" tabindex="-1">Usage</h2>\n<div class="van-doc-card"><h3 id="single-call" tabindex="-1">Single Call</h3>\n<p>By using the <code>useRaf</code> method, you can execute a function before the next browser repaint.</p>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { useRaf } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vant/use&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;\n    <span class="hljs-title function_">useRaf</span>(<span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(++count); <span class="hljs-comment">// It will only be executed once.</span>\n    });\n  },\n};\n</code></pre>\n</div><div class="van-doc-card"><h3 id="loop-calls" tabindex="-1">Loop Calls</h3>\n<p>By using the <code>isLoop</code> option, you can execution of a function repeatedly at a specified interval until it is canceled.</p>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { useRaf } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vant/use&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;\n    <span class="hljs-keyword">const</span> cancelRaf = <span class="hljs-title function_">useRaf</span>(\n      <span class="hljs-function">() =&gt;</span> {\n        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(++count); <span class="hljs-comment">// Execute infinitely until canceled</span>\n\n        <span class="hljs-keyword">if</span> (count === <span class="hljs-number">5</span>) {\n          <span class="hljs-title function_">cancelRaf</span>();\n        }\n      },\n      {\n        <span class="hljs-attr">isLoop</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// Enable the loop</span>\n        <span class="hljs-attr">interval</span>: <span class="hljs-number">100</span>, <span class="hljs-comment">// Set call interval</span>\n      },\n    );\n  },\n};\n</code></pre>\n</div><h2 id="api" tabindex="-1">API</h2>\n<div class="van-doc-card"><h3 id="type-declarations" tabindex="-1">Type Declarations</h3>\n<pre><code class="language-ts"><span class="hljs-keyword">function</span> <span class="hljs-title function_">useRaf</span>(<span class="hljs-params">\n  callback: () =&gt; <span class="hljs-built_in">void</span>,\n  options: {\n    interval?: <span class="hljs-built_in">number</span>;\n    isLoop?: <span class="hljs-built_in">boolean</span>;\n  },\n</span>): <span class="hljs-built_in">void</span>;\n</code></pre>\n</div><div class="van-doc-card"><h3 id="params" tabindex="-1">Params</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>callback</td>\n<td>Callback</td>\n<td><em>() =&gt; void</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>options</td>\n<td>Options</td>\n<td><em>{ interval?: number; isLoop?: boolean }</em></td>\n<td><em>{ interval: 0; isLoop: false }</em></td>\n</tr>\n</tbody>\n</table>\n</div>'},null,8,e))}}}]);