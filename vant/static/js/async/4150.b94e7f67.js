"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["4150"],{40732:function(s,a,n){n.r(a);var l=n("38061");let t=["innerHTML"];a.default={setup:()=>({html:""}),render:()=>((0,l.wg)(),(0,l.iD)("div",{class:"van-doc-markdown-body",innerHTML:'<h1>Form</h1>\n<div class="van-doc-card"><h3 id="intro" tabindex="-1">Intro</h3>\n<p>Used for data entry and verification, and supports input boxes, radio buttons, check boxes, file uploads and other types. Should be used with <a href="#/en-US/field" target="_blank">Field</a> component.</p>\n</div><div class="van-doc-card"><h3 id="install" tabindex="-1">Install</h3>\n<p>Register component globally via <code>app.use</code>, refer to <a href="#/en-US/advanced-usage#zu-jian-zhu-ce" target="_blank">Component Registration</a> for more registration ways.</p>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { createApp } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Form</span>, <span class="hljs-title class_">Field</span>, <span class="hljs-title class_">CellGroup</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vant&#x27;</span>;\n\n<span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>();\napp.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Form</span>);\napp.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Field</span>);\napp.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">CellGroup</span>);\n</code></pre>\n</div><h2 id="usage" tabindex="-1">Usage</h2>\n<div class="van-doc-card"><h3 id="basic-usage" tabindex="-1">Basic Usage</h3>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">van-form</span> @<span class="hljs-attr">submit</span>=<span class="hljs-string">&quot;onSubmit&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">van-cell-group</span> <span class="hljs-attr">inset</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">van-field</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;username&quot;</span>\n      <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Username&quot;</span>\n      <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Username&quot;</span>\n      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Username&quot;</span>\n      <span class="hljs-attr">:rules</span>=<span class="hljs-string">&quot;[{ required: true, message: &#x27;Username is required&#x27; }]&quot;</span>\n    /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">van-field</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;password&quot;</span>\n      <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span>\n      <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Password&quot;</span>\n      <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Password&quot;</span>\n      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Password&quot;</span>\n      <span class="hljs-attr">:rules</span>=<span class="hljs-string">&quot;[{ required: true, message: &#x27;Password is required&#x27; }]&quot;</span>\n    /&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">van-cell-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin: 16px;&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">van-button</span> <span class="hljs-attr">round</span> <span class="hljs-attr">block</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">native-type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>\n      Submit\n    <span class="hljs-tag">&lt;/<span class="hljs-name">van-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">van-form</span>&gt;</span>\n</code></pre>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-keyword">const</span> username = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;&#x27;</span>);\n    <span class="hljs-keyword">const</span> password = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;&#x27;</span>);\n    <span class="hljs-keyword">const</span> <span class="hljs-title function_">onSubmit</span> = (<span class="hljs-params">values</span>) =&gt; {\n      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;submit&#x27;</span>, values);\n    };\n\n    <span class="hljs-keyword">return</span> {\n      username,\n      password,\n      onSubmit,\n    };\n  },\n};\n</code></pre>\n</div><div class="van-doc-card"><h3 id="validate-rules" tabindex="-1">Validate Rules</h3>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">van-form</span> @<span class="hljs-attr">failed</span>=<span class="hljs-string">&quot;onFailed&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">van-cell-group</span> <span class="hljs-attr">inset</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">van-field</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value1&quot;</span>\n      <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pattern&quot;</span>\n      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Use pattern&quot;</span>\n      <span class="hljs-attr">:rules</span>=<span class="hljs-string">&quot;[{ pattern, message: &#x27;Error message&#x27; }]&quot;</span>\n    /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">van-field</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value2&quot;</span>\n      <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;validator&quot;</span>\n      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Use validator&quot;</span>\n      <span class="hljs-attr">:rules</span>=<span class="hljs-string">&quot;[{ validator, message: &#x27;Error message&#x27; }]&quot;</span>\n    /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">van-field</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value3&quot;</span>\n      <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;validatorMessage&quot;</span>\n      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Use validator to return message&quot;</span>\n      <span class="hljs-attr">:rules</span>=<span class="hljs-string">&quot;[{ validator: validatorMessage }]&quot;</span>\n    /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">van-field</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value4&quot;</span>\n      <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;asyncValidator&quot;</span>\n      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Use async validator&quot;</span>\n      <span class="hljs-attr">:rules</span>=<span class="hljs-string">&quot;[{ validator: asyncValidator, message: &#x27;Error message&#x27; }]&quot;</span>\n    /&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">van-cell-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin: 16px;&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">van-button</span> <span class="hljs-attr">round</span> <span class="hljs-attr">block</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">native-type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>\n      Submit\n    <span class="hljs-tag">&lt;/<span class="hljs-name">van-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">van-form</span>&gt;</span>\n</code></pre>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n<span class="hljs-keyword">import</span> { closeToast, showLoadingToast } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vant&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-keyword">const</span> value1 = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;&#x27;</span>);\n    <span class="hljs-keyword">const</span> value2 = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;&#x27;</span>);\n    <span class="hljs-keyword">const</span> value3 = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;abc&#x27;</span>);\n    <span class="hljs-keyword">const</span> value4 = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;&#x27;</span>);\n    <span class="hljs-keyword">const</span> pattern = <span class="hljs-regexp">/\\d{6}/</span>;\n\n    <span class="hljs-keyword">const</span> <span class="hljs-title function_">validator</span> = (<span class="hljs-params">val</span>) =&gt; <span class="hljs-regexp">/1\\d{10}/</span>.<span class="hljs-title function_">test</span>(val);\n\n    <span class="hljs-keyword">const</span> <span class="hljs-title function_">validatorMessage</span> = (<span class="hljs-params">val</span>) =&gt; <span class="hljs-string">`<span class="hljs-subst">${val}</span> is invalid`</span>;\n\n    <span class="hljs-keyword">const</span> <span class="hljs-title function_">asyncValidator</span> = (<span class="hljs-params">val</span>) =&gt;\n      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> {\n        <span class="hljs-title function_">showLoadingToast</span>(<span class="hljs-string">&#x27;Validating...&#x27;</span>);\n\n        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {\n          <span class="hljs-title function_">closeToast</span>();\n          <span class="hljs-title function_">resolve</span>(val === <span class="hljs-string">&#x27;1234&#x27;</span>);\n        }, <span class="hljs-number">1000</span>);\n      });\n\n    <span class="hljs-keyword">const</span> <span class="hljs-title function_">onFailed</span> = (<span class="hljs-params">errorInfo</span>) =&gt; {\n      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;failed&#x27;</span>, errorInfo);\n    };\n\n    <span class="hljs-keyword">return</span> {\n      value1,\n      value2,\n      value3,\n      value4,\n      pattern,\n      onFailed,\n      validator,\n      asyncValidator,\n      validatorMessage,\n    };\n  },\n};\n</code></pre>\n</div><div class="van-doc-card"><h3 id="field-type---switch" tabindex="-1">Field Type - Switch</h3>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">van-field</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;switch&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Switch&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">input</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">van-switch</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checked&quot;</span> /&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">van-field</span>&gt;</span>\n</code></pre>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-keyword">const</span> checked = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>);\n    <span class="hljs-keyword">return</span> { checked };\n  },\n};\n</code></pre>\n</div><div class="van-doc-card"><h3 id="field-type---checkbox" tabindex="-1">Field Type - Checkbox</h3>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">van-field</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Checkbox&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">input</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">van-checkbox</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checked&quot;</span> <span class="hljs-attr">shape</span>=<span class="hljs-string">&quot;square&quot;</span> /&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">van-field</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">van-field</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkboxGroup&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;CheckboxGroup&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">input</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">van-checkbox-group</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;groupChecked&quot;</span> <span class="hljs-attr">direction</span>=<span class="hljs-string">&quot;horizontal&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">van-checkbox</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">shape</span>=<span class="hljs-string">&quot;square&quot;</span>&gt;</span>Checkbox 1<span class="hljs-tag">&lt;/<span class="hljs-name">van-checkbox</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">van-checkbox</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">shape</span>=<span class="hljs-string">&quot;square&quot;</span>&gt;</span>Checkbox 2<span class="hljs-tag">&lt;/<span class="hljs-name">van-checkbox</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">van-checkbox-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">van-field</span>&gt;</span>\n</code></pre>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-keyword">const</span> checked = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>);\n    <span class="hljs-keyword">const</span> groupChecked = <span class="hljs-title function_">ref</span>([]);\n    <span class="hljs-keyword">return</span> {\n      checked,\n      groupChecked,\n    };\n  },\n};\n</code></pre>\n</div><div class="van-doc-card"><h3 id="field-type---radio" tabindex="-1">Field Type - Radio</h3>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">van-field</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Radio&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">input</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">van-radio-group</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checked&quot;</span> <span class="hljs-attr">direction</span>=<span class="hljs-string">&quot;horizontal&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">van-radio</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>Radio 1<span class="hljs-tag">&lt;/<span class="hljs-name">van-radio</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">van-radio</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>Radio 2<span class="hljs-tag">&lt;/<span class="hljs-name">van-radio</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">van-radio-group</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">van-field</span>&gt;</span>\n</code></pre>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-keyword">const</span> checked = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;1&#x27;</span>);\n    <span class="hljs-keyword">return</span> { checked };\n  },\n};\n</code></pre>\n</div><div class="van-doc-card"><h3 id="field-type---stepper" tabindex="-1">Field Type - Stepper</h3>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">van-field</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stepper&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Stepper&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">input</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">van-stepper</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> /&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">van-field</span>&gt;</span>\n</code></pre>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-keyword">const</span> value = <span class="hljs-title function_">ref</span>(<span class="hljs-number">1</span>);\n    <span class="hljs-keyword">return</span> { value };\n  },\n};\n</code></pre>\n</div><div class="van-doc-card"><h3 id="field-type---rate" tabindex="-1">Field Type - Rate</h3>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">van-field</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rate&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Rate&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">input</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">van-rate</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> /&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">van-field</span>&gt;</span>\n</code></pre>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-keyword">const</span> value = <span class="hljs-title function_">ref</span>(<span class="hljs-number">3</span>);\n    <span class="hljs-keyword">return</span> { value };\n  },\n};\n</code></pre>\n</div><div class="van-doc-card"><h3 id="field-type---slider" tabindex="-1">Field Type - Slider</h3>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">van-field</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;slider&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Slider&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">input</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">van-slider</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> /&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">van-field</span>&gt;</span>\n</code></pre>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-keyword">const</span> value = <span class="hljs-title function_">ref</span>(<span class="hljs-number">50</span>);\n    <span class="hljs-keyword">return</span> { value };\n  },\n};\n</code></pre>\n</div><div class="van-doc-card"><h3 id="field-type---uploader" tabindex="-1">Field Type - Uploader</h3>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">van-field</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;uploader&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Uploader&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">input</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">van-uploader</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;value&quot;</span> /&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">van-field</span>&gt;</span>\n</code></pre>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-keyword">const</span> value = <span class="hljs-title function_">ref</span>([\n      { <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://fastly.jsdelivr.net/npm/@vant/assets/leaf.jpeg&#x27;</span> },\n    ]);\n    <span class="hljs-keyword">return</span> { value };\n  },\n};\n</code></pre>\n</div><div class="van-doc-card"><h3 id="field-type---picker" tabindex="-1">Field Type - Picker</h3>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">van-field</span>\n  <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;result&quot;</span>\n  <span class="hljs-attr">is-link</span>\n  <span class="hljs-attr">readonly</span>\n  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;picker&quot;</span>\n  <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Picker&quot;</span>\n  <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Select city&quot;</span>\n  @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showPicker = true&quot;</span>\n/&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">van-popup</span> <span class="hljs-attr">v-model:show</span>=<span class="hljs-string">&quot;showPicker&quot;</span> <span class="hljs-attr">position</span>=<span class="hljs-string">&quot;bottom&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">van-picker</span>\n    <span class="hljs-attr">:columns</span>=<span class="hljs-string">&quot;columns&quot;</span>\n    @<span class="hljs-attr">confirm</span>=<span class="hljs-string">&quot;onConfirm&quot;</span>\n    @<span class="hljs-attr">cancel</span>=<span class="hljs-string">&quot;showPicker = false&quot;</span>\n  /&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">van-popup</span>&gt;</span>\n</code></pre>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-keyword">const</span> result = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;&#x27;</span>);\n    <span class="hljs-keyword">const</span> showPicker = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>);\n    <span class="hljs-keyword">const</span> columns = [\n      { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Delaware&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;Delaware&#x27;</span> },\n      { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Florida&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;Florida&#x27;</span> },\n      { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Georgia&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;Georgia&#x27;</span> },\n      { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Indiana&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;Indiana&#x27;</span> },\n      { <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Maine&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;Maine&#x27;</span> },\n    ];\n\n    <span class="hljs-keyword">const</span> <span class="hljs-title function_">onConfirm</span> = (<span class="hljs-params">{ selectedOptions }</span>) =&gt; {\n      result.<span class="hljs-property">value</span> = selectedOptions[<span class="hljs-number">0</span>]?.<span class="hljs-property">text</span>;\n      showPicker.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span>;\n    };\n\n    <span class="hljs-keyword">return</span> {\n      result,\n      columns,\n      onConfirm,\n      showPicker,\n    };\n  },\n};\n</code></pre>\n</div><div class="van-doc-card"><h3 id="field-type---datepicker" tabindex="-1">Field Type - DatePicker</h3>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">van-field</span>\n  <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;result&quot;</span>\n  <span class="hljs-attr">is-link</span>\n  <span class="hljs-attr">readonly</span>\n  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;datePicker&quot;</span>\n  <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Date Picker&quot;</span>\n  <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Select date&quot;</span>\n  @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showPicker = true&quot;</span>\n/&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">van-popup</span> <span class="hljs-attr">v-model:show</span>=<span class="hljs-string">&quot;showPicker&quot;</span> <span class="hljs-attr">position</span>=<span class="hljs-string">&quot;bottom&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">van-date-picker</span> @<span class="hljs-attr">confirm</span>=<span class="hljs-string">&quot;onConfirm&quot;</span> @<span class="hljs-attr">cancel</span>=<span class="hljs-string">&quot;showPicker = false&quot;</span> /&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">van-popup</span>&gt;</span>\n</code></pre>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-keyword">const</span> result = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;&#x27;</span>);\n    <span class="hljs-keyword">const</span> showPicker = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>);\n    <span class="hljs-keyword">const</span> <span class="hljs-title function_">onConfirm</span> = (<span class="hljs-params">{ selectedValues }</span>) =&gt; {\n      result.<span class="hljs-property">value</span> = selectedValues.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;/&#x27;</span>);\n      showPicker.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span>;\n    };\n\n    <span class="hljs-keyword">return</span> {\n      result,\n      onConfirm,\n      showPicker,\n    };\n  },\n};\n</code></pre>\n</div><div class="van-doc-card"><h3 id="field-type---area" tabindex="-1">Field Type - Area</h3>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">van-field</span>\n  <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;result&quot;</span>\n  <span class="hljs-attr">is-link</span>\n  <span class="hljs-attr">readonly</span>\n  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;area&quot;</span>\n  <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Area Picker&quot;</span>\n  <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Select area&quot;</span>\n  @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showArea = true&quot;</span>\n/&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">van-popup</span> <span class="hljs-attr">v-model:show</span>=<span class="hljs-string">&quot;showArea&quot;</span> <span class="hljs-attr">position</span>=<span class="hljs-string">&quot;bottom&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">van-area</span>\n    <span class="hljs-attr">:area-list</span>=<span class="hljs-string">&quot;areaList&quot;</span>\n    @<span class="hljs-attr">confirm</span>=<span class="hljs-string">&quot;onConfirm&quot;</span>\n    @<span class="hljs-attr">cancel</span>=<span class="hljs-string">&quot;showArea = false&quot;</span>\n  /&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">van-popup</span>&gt;</span>\n</code></pre>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n<span class="hljs-keyword">import</span> { areaList } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vant/area-data&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-keyword">const</span> result = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;&#x27;</span>);\n    <span class="hljs-keyword">const</span> showArea = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>);\n    <span class="hljs-keyword">const</span> <span class="hljs-title function_">onConfirm</span> = (<span class="hljs-params">{ selectedOptions }</span>) =&gt; {\n      showArea.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span>;\n      result.<span class="hljs-property">value</span> = selectedOptions.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">text</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;/&#x27;</span>);\n    };\n\n    <span class="hljs-keyword">return</span> {\n      result,\n      areaList,\n      showArea,\n      onConfirm,\n    };\n  },\n};\n</code></pre>\n</div><div class="van-doc-card"><h3 id="field-type---calendar" tabindex="-1">Field Type - Calendar</h3>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">van-field</span>\n  <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;result&quot;</span>\n  <span class="hljs-attr">is-link</span>\n  <span class="hljs-attr">readonly</span>\n  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;calendar&quot;</span>\n  <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Calendar&quot;</span>\n  <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Select date&quot;</span>\n  @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showCalendar = true&quot;</span>\n/&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">van-calendar</span> <span class="hljs-attr">v-model:show</span>=<span class="hljs-string">&quot;showCalendar&quot;</span> @<span class="hljs-attr">confirm</span>=<span class="hljs-string">&quot;onConfirm&quot;</span> /&gt;</span>\n</code></pre>\n<pre><code class="language-js"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-keyword">const</span> result = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;&#x27;</span>);\n    <span class="hljs-keyword">const</span> showCalendar = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>);\n    <span class="hljs-keyword">const</span> <span class="hljs-title function_">onConfirm</span> = (<span class="hljs-params">date</span>) =&gt; {\n      result.<span class="hljs-property">value</span> = <span class="hljs-string">`<span class="hljs-subst">${date.getMonth() + <span class="hljs-number">1</span>}</span>/<span class="hljs-subst">${date.getDate()}</span>`</span>;\n      showCalendar.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span>;\n    };\n\n    <span class="hljs-keyword">return</span> {\n      result,\n      onConfirm,\n      showCalendar,\n    };\n  },\n};\n</code></pre>\n</div><h2 id="api" tabindex="-1">API</h2>\n<div class="van-doc-card"><h3 id="props" tabindex="-1">Props</h3>\n<table>\n<thead>\n<tr>\n<th>Attribute</th>\n<th>Description</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>label-width</td>\n<td>Field label width</td>\n<td><em>number | string</em></td>\n<td><code>6.2em</code></td>\n</tr>\n<tr>\n<td>label-align</td>\n<td>Field label align, can be set to <code>center</code> <code>right</code> <code>top</code></td>\n<td><em>string</em></td>\n<td><code>left</code></td>\n</tr>\n<tr>\n<td>input-align</td>\n<td>Field input align, can be set to <code>center</code> <code>right</code></td>\n<td><em>string</em></td>\n<td><code>left</code></td>\n</tr>\n<tr>\n<td>error-message-align</td>\n<td>Error message align, can be set to <code>center</code> <code>right</code></td>\n<td><em>string</em></td>\n<td><code>left</code></td>\n</tr>\n<tr>\n<td>validate-trigger</td>\n<td>When to validate the form, can be set to <code>onChange</code>\u3001<code>onSubmit</code>, supports using array to set multiple values</td>\n<td><em>string | string[]</em></td>\n<td><code>onBlur</code></td>\n</tr>\n<tr>\n<td>colon</td>\n<td>Whether to display colon after label</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>Whether to disable form</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>readonly</td>\n<td>Whether to be readonly</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>required <code>v4.7.3</code></td>\n<td>Whether to show required mark</td>\n<td><em>boolean | \'auto\'</em></td>\n<td><code>null</code></td>\n</tr>\n<tr>\n<td>validate-first</td>\n<td>Whether to stop the validation when a rule fails</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>scroll-to-error</td>\n<td>Whether to scroll to the error field when validation failed</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>show-error</td>\n<td>Whether to highlight input when validation failed</td>\n<td><em>boolean</em></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>show-error-message</td>\n<td>Whether to show error message when validation failed</td>\n<td><em>boolean</em></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>submit-on-enter</td>\n<td>Whether to submit form on enter</td>\n<td><em>boolean</em></td>\n<td><code>true</code></td>\n</tr>\n</tbody>\n</table>\n</div><div class="van-doc-card"><h3 id="data-structure-of-rule" tabindex="-1">Data Structure of Rule</h3>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>required</td>\n<td>Whether to be a required field, the value is not allowed to be empty (empty string, empty array, <code>false</code>, <code>undefined</code>, <code>null</code>)</td>\n<td><em>boolean</em></td>\n</tr>\n<tr>\n<td>message</td>\n<td>Error message, can be a function to dynamically return message content</td>\n<td><em>string | (value, rule) =&gt; string</em></td>\n</tr>\n<tr>\n<td>validator</td>\n<td>Custom validator, can return a Promise to validate dynamically</td>\n<td><em>(value, rule) =&gt; boolean | string | Promise</em></td>\n</tr>\n<tr>\n<td>pattern</td>\n<td>Regexp pattern, if the regexp cannot match, means that the validation fails</td>\n<td><em>RegExp</em></td>\n</tr>\n<tr>\n<td>trigger</td>\n<td>When to validate the form, priority is higher than the <code>validate-trigger</code> of the Form component, can be set to <code>onChange</code>, <code>onBlur</code>, <code>onSubmit</code></td>\n<td><em>string | string[]</em></td>\n</tr>\n<tr>\n<td>formatter</td>\n<td>Format value before validate</td>\n<td><em>(value, rule) =&gt; any</em></td>\n</tr>\n<tr>\n<td>validateEmpty</td>\n<td>Controls whether the <code>validator</code> and <code>pattern</code> options to verify empty values, the default value is <code>true</code>, you can set to <code>false</code> to disable this behavior</td>\n<td><em>boolean</em></td>\n</tr>\n</tbody>\n</table>\n</div><div class="van-doc-card"><h3 id="validate-trigger" tabindex="-1">validate-trigger</h3>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>onSubmit</td>\n<td>Trigger validation after submitting form</td>\n</tr>\n<tr>\n<td>onBlur</td>\n<td>Trigger validation after submitting form or blurring input</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>Trigger validation after submitting form or changing input value</td>\n</tr>\n</tbody>\n</table>\n</div><div class="van-doc-card"><h3 id="events" tabindex="-1">Events</h3>\n<table>\n<thead>\n<tr>\n<th>Event</th>\n<th>Description</th>\n<th>Arguments</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>submit</td>\n<td>Emitted after submitting the form and validation passed</td>\n<td><em>values: object</em></td>\n</tr>\n<tr>\n<td>failed</td>\n<td>Emitted after submitting the form and validation failed</td>\n<td><em>errorInfo: { values: object, errors: object[] }</em></td>\n</tr>\n</tbody>\n</table>\n</div><div class="van-doc-card"><h3 id="methods" tabindex="-1">Methods</h3>\n<p>Use <a href="https://vuejs.org/guide/essentials/template-refs.html" target="_blank">ref</a> to get Form instance and call instance methods.</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n<th>Attribute</th>\n<th>Return value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>submit</td>\n<td>Submit form</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>getValues</td>\n<td>Get current form values</td>\n<td>-</td>\n<td><em>Record&lt;string, unknown&gt;</em></td>\n</tr>\n<tr>\n<td>validate</td>\n<td>Validate form</td>\n<td><em>name?: string | string[]</em></td>\n<td><em>Promise&lt;void&gt;</em></td>\n</tr>\n<tr>\n<td>resetValidation</td>\n<td>Reset validation</td>\n<td><em>name?: string | string[]</em></td>\n<td>-</td>\n</tr>\n<tr>\n<td>getValidationStatus</td>\n<td>Get validation status of all fields\uFF0Cstatus can be <code>passed</code>\u3001<code>failed</code>\u3001<code>unvalidated</code></td>\n<td>-</td>\n<td><em>Record&lt;string, FieldValidationStatus&gt;</em></td>\n</tr>\n<tr>\n<td>scrollToField</td>\n<td>Scroll to field</td>\n<td><em>name: string, alignToTop: boolean</em></td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n</div><div class="van-doc-card"><h3 id="types" tabindex="-1">Types</h3>\n<p>The component exports the following type definitions:</p>\n<pre><code class="language-ts"><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> { <span class="hljs-title class_">FormProps</span>, <span class="hljs-title class_">FormInstance</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vant&#x27;</span>;\n</code></pre>\n<p><code>FormInstance</code> is the type of component instance:</p>\n<pre><code class="language-ts"><span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> { <span class="hljs-title class_">FormInstance</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vant&#x27;</span>;\n\n<span class="hljs-keyword">const</span> formRef = ref&lt;<span class="hljs-title class_">FormInstance</span>&gt;();\n\nformRef.<span class="hljs-property">value</span>?.<span class="hljs-title function_">submit</span>();\n</code></pre>\n</div><div class="van-doc-card"><h3 id="slots" tabindex="-1">Slots</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>default</td>\n<td>Form content</td>\n</tr>\n</tbody>\n</table>\n</div>'},null,8,t))}}}]);